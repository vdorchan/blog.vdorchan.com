<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaScript on Two Cold</title>
    <link>http://example.org/tags/javascript/</link>
    <description>Recent content in JavaScript on Two Cold</description>
    <image>
      <url><https://cdn.nlark.com/yuque/0/2021/png/376315/1618928111859-91bbc46e-c8b2-414b-ab1d-5d78d250fb46.png, twitter-cards></url>
      <link><https://cdn.nlark.com/yuque/0/2021/png/376315/1618928111859-91bbc46e-c8b2-414b-ab1d-5d78d250fb46.png, twitter-cards></link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 23 Apr 2019 10:44:48 +0000</lastBuildDate><atom:link href="http://example.org/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>前端性能优化与浏览器渲染</title>
      <link>http://example.org/posts/frontend-performance-optimization/</link>
      <pubDate>Tue, 23 Apr 2019 10:44:48 +0000</pubDate>
      
      <guid>http://example.org/posts/frontend-performance-optimization/</guid>
      <description>对性能优化的知识点做了些总结，如有纰漏，跪求批评指正。
 在我们共同推动网页实现更多功能的过程中，将遇到一个常见的问题：性能。 如今，网站拥有比以往更多的功能，以至于许多网站都将精力用于在各种网络条件和设备上提供更高的性能。
不过，性能问题多种多样。轻微性能问题可能只会导致微弱的延迟，给您的用户带来短暂的不便。而严重的性能问题可能导致您的网站完全无法访问，无法对用户输入进行响应或两者同时发生。
内容压缩和优化 总体来说，我们要避免不必要的下载，首先要去评估每个资产的表现：其价值及其技术性能。然后根据这些资源是否提供了足够的价值来决定是否要移除它们。
比如一些 CSS 框架的开销可能导致渲染延迟严重，你可以视情况移除不必要的开销，以加速渲染。或者，移除不是必须的框架（使用更小的框架代替，例如使用 zepto 代替 jQuery，使用 Preact 代替 React）
而那些必要的资源，我们应该要对它进行压缩优化，根据资源(文本、图像、字体、源码等)的不同，我们使用不同技术压缩。
除了压缩，还可以对不同资源进行特定的优化：
  图像优化
 选择合适的尺寸 使用 CSS3 效果和网页字体代替图像 由于人眼的工作方式的缘故，可以适当进行有损压缩 假如浏览器支持，可以使用 WebP 和 JPEG XR 等压缩率更高的新格式 使用 &amp;lt;picture&amp;gt; 和 &amp;lt;img srcset&amp;gt; 实现响应式图片使用 &amp;lt;picture&amp;gt; 和 &amp;lt;img srcset&amp;gt; 来完成。给 img 或设置了 background 的 CSS 属性的元素，将其设置为 display: none，并不能其阻止加载图片。 使用视频代替 GIF， 当使用视频代替动画 GIF 时，可以减小数据量，并可能减少系统资源的使用。    脚本优化
 减少重排（reflow）和重绘（repaint）操作 缓存 DOM 元素、DOM 列表长度 length、属性值 使用事件委托，避免批量绑定事件 尽量使用 ID 选择器，因为它一经找到就停止查找，而使用类选择器的话将遍历整个dom 移动端使用 touch 事件代替 click 事件，因为 click 有 300ms 延迟 使用节流（throttle）和防抖（debounce）函数减少性能消耗    HTML优化</description>
    </item>
    
    <item>
      <title>JavaScript 实现二分搜索和快速排序</title>
      <link>http://example.org/posts/binary-search/</link>
      <pubDate>Mon, 22 Apr 2019 16:33:39 +0000</pubDate>
      
      <guid>http://example.org/posts/binary-search/</guid>
      <description>二分搜索  在计算机科学中，二分搜索（binary search）是一种在有序数组中查找某一特定元素的搜索算法。搜索过程从数组的中间元素开始，如果中间元素正好是要查找的元素，则搜索过程结束；如果某一特定元素大于或者小于中间元素，则在数组大于或小于中间元素的那一半中查找，而且跟开始一样从中间元素开始比较。如果在某一步骤数组为空，则代表找不到。这种搜索算法每一次比较都使搜索范围缩小一半
 利用递归实现
/** * 二分查找，递归实现 * @param {*} arr * @param {*} target * @param {*} low * @param {*} high */ function binarySearch(arr, target, low = 0, high = arr.length - 1) { if (low &amp;gt; high) { return -1 } const mid = parseInt((low + high) / 2) if (target &amp;lt; arr[mid]) { return binarySearch(arr, target, low, mid - 1) } if (target &amp;gt; arr[mid]) { return binarySearch(arr, target, mid + 1, high) } return mid } 非递归实现</description>
    </item>
    
    <item>
      <title>让人脑壳疼的继承与原型链</title>
      <link>http://example.org/posts/interitance-and-the-prototype-chain/</link>
      <pubDate>Wed, 27 Mar 2019 10:43:12 +0000</pubDate>
      
      <guid>http://example.org/posts/interitance-and-the-prototype-chain/</guid>
      <description>JavaScript 的继承是基于原型链实现的。虽然在 ES2015/ES6 中引入了class关键字，但那仅仅是语法糖。
原型链是一种机制，指的是 JavaScript 每个对象都有一个内置的 __proto__ 属性指向创建它的构造函数的 prototype （原型）属性。
比如
function Person() { } var person = new Person() console.log(person.__proto__ === Person.prototype) // true 函数也是对象 普通对象是这样子的：
var o1 = {} var o2 = new object() 凡是像下面代码使用 function 关键字或 Fucntion 构造函数创建的对象都是函数对象。只有函数对象才拥有 prototype （原型）对象。
function f1 () {} var f2 = function (){} var f3 = new Function(&amp;#39;str&amp;#39;, &amp;#39;console.log(str)&amp;#39;) 构造函数和 prototype ECMAScript 中提供了构造函数来创建新对象。构造函数本身就是一个函数，它和普通函数没有任何的区别。
前面示例代码中的 Person 就是一个构造函数，首字母大写并不是它被称为构造函数的原因，这是管理，但不是必须的。
而是因为函数被 new 关键字调用时就是构造函数。
那么当 Person 构造函数被 new 关键字调用的时候都发生了什么呢？</description>
    </item>
    
    <item>
      <title>学习 JavaScript 的闭包（翻译）</title>
      <link>http://example.org/posts/learn-javascript-closures/</link>
      <pubDate>Wed, 13 Dec 2017 15:00:00 +0000</pubDate>
      
      <guid>http://example.org/posts/learn-javascript-closures/</guid>
      <description>1. 扩展运算符  闭包（Closures）: 闭包是指一个拥有很多变量和与这些变量绑定的环境的表达式（大多数时候是一个函数），这些变量也属于这个表达式。
 Closures are one of the most powerful features of ECMAScript (javascript) but they cannot be property exploited without understanding them. They are, however, relatively easy to create, even accidentally, and their creation has potentially harmful consequences, particularly in some relatively common web browser environments. To avoid accidentally encountering the drawbacks and to take advantage of the benefits they offer it is necessary to understand their mechanism.</description>
    </item>
    
  </channel>
</rss>
