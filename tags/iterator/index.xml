<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Iterator on Two Cold</title>
    <link>http://example.org/tags/iterator/</link>
    <description>Recent content in Iterator on Two Cold</description>
    <image>
      <url><https://cdn.nlark.com/yuque/0/2021/png/376315/1618928111859-91bbc46e-c8b2-414b-ab1d-5d78d250fb46.png, twitter-cards></url>
      <link><https://cdn.nlark.com/yuque/0/2021/png/376315/1618928111859-91bbc46e-c8b2-414b-ab1d-5d78d250fb46.png, twitter-cards></link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 24 Feb 2018 14:05:59 +0000</lastBuildDate><atom:link href="http://example.org/tags/iterator/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Learn-ES6-Iterator</title>
      <link>http://example.org/posts/learn-es6-iterator/</link>
      <pubDate>Sat, 24 Feb 2018 14:05:59 +0000</pubDate>
      
      <guid>http://example.org/posts/learn-es6-iterator/</guid>
      <description>1.Iterator（遍历器） Javascript 现有的表示集合的数据结构，出了原本的对象（Object）和数组（Array），ES6 又增加了 Set 和 Map。Iterator 是可以用来统一处理所有不同的数据结构的接口机制。任何数据结构只要部署了 Interator 接口，就可以完成遍历操作。
Iterator 的作用有三个：一是为各种数据结构，提供一个统一的、简便的访问接口；二是使得数据结构的成员能够按某种次序排列；三是 ES6 创造了一种新的遍历命令for&amp;hellip;of循环，Iterator 接口主要供for&amp;hellip;of消费。
Interator 的遍历过程是首先创建一个指针对象，指向当前数据结构的起始位置，然后调用指针对象的 next 方法，从数据结构的第一个成员开始，依次指向每个成员，直到指向数据结构的结束位置。
每一次调用next方法，都会返回数据结构的当前成员的信息。具体来说，就是返回一个包含value和done两个属性的对象。其中，value属性是当前成员的值，done属性是一个布尔值，表示遍历是否结束。
一个模拟 next 方法返回值的例子
const makeInterator = (array) =&amp;gt; { let nextIndex = 0 return { next() { return nextIndex &amp;lt; array.length ? {value: array[nextIndex++], done: false} : {value: undefined, done: true} } } } var it = makeInterator([&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;]) it.next() // {value: &amp;#39;a&amp;#39;, done: false} it.next() // {value: &amp;#39;b&amp;#39;, done: false} it.</description>
    </item>
    
  </channel>
</rss>
