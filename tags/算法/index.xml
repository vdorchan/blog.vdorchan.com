<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法 on Two Cold</title>
    <link>http://example.org/tags/%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 算法 on Two Cold</description>
    <image>
      <url><https://cdn.nlark.com/yuque/0/2021/png/376315/1618928111859-91bbc46e-c8b2-414b-ab1d-5d78d250fb46.png, twitter-cards></url>
      <link><https://cdn.nlark.com/yuque/0/2021/png/376315/1618928111859-91bbc46e-c8b2-414b-ab1d-5d78d250fb46.png, twitter-cards></link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 22 Apr 2019 16:33:39 +0000</lastBuildDate><atom:link href="http://example.org/tags/%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JavaScript 实现二分搜索和快速排序</title>
      <link>http://example.org/posts/binary-search/</link>
      <pubDate>Mon, 22 Apr 2019 16:33:39 +0000</pubDate>
      
      <guid>http://example.org/posts/binary-search/</guid>
      <description>二分搜索  在计算机科学中，二分搜索（binary search）是一种在有序数组中查找某一特定元素的搜索算法。搜索过程从数组的中间元素开始，如果中间元素正好是要查找的元素，则搜索过程结束；如果某一特定元素大于或者小于中间元素，则在数组大于或小于中间元素的那一半中查找，而且跟开始一样从中间元素开始比较。如果在某一步骤数组为空，则代表找不到。这种搜索算法每一次比较都使搜索范围缩小一半
 利用递归实现
/** * 二分查找，递归实现 * @param {*} arr * @param {*} target * @param {*} low * @param {*} high */ function binarySearch(arr, target, low = 0, high = arr.length - 1) { if (low &amp;gt; high) { return -1 } const mid = parseInt((low + high) / 2) if (target &amp;lt; arr[mid]) { return binarySearch(arr, target, low, mid - 1) } if (target &amp;gt; arr[mid]) { return binarySearch(arr, target, mid + 1, high) } return mid } 非递归实现</description>
    </item>
    
  </channel>
</rss>
